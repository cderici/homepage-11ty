<div class="w3-container w3-card w3-white w3-margin-bottom w3-animate-opacity">
  <h2 class="w3-text-grey w3-padding-16">
    <i class="fa fa-check fa-fw w3-margin-right w3-xxlarge w3-text-deep-orange"></i>
    TL;DR
  </h2>
  <div class="w3-container w3-margin-left w3-margin-right">
    <p>I have expertise in distributed systems, compilers and programming languages.</p>

    <p>My tech stack includes: Go, Python, Racket, C/C++, SQL/NoSQL, LXD, Docker, k8s and more.</p>

    <p>I worked at Canonical for over three years on the Enterprise Cloud Engineering team (Juju). There I gained extensive experience in complex distributed systems. I owned deliverables, maintained release cadence, participated in roadmap planning, coordinated cross‑team work, mentored junior engineers and took part in hiring.</p>

    <p>I gained experience in distributed orchestration for managing complex cloud workloads for Kubernetes and traditional Linux apps across various cloud providers (e.g. AWS, GCE). My primary focus in Juju was on the eventually consistent, worker‑based distributed back end. I architected full‑stack distributed components, tackled orchestration, fault tolerance, back‑pressure handling and more. I helped API design, improved the facade‑based API server and helped transition the observer‑based data layer from MongoDB to relational DQLite. I maintained client libraries (e.g. <a href="https://github.com/juju/python-libjuju" class="lnk">python‑libjuju</a>). See my <a href="https://github.com/cderici" class="lnk">GitHub</a>.</p>

    <p>I'm also currently a post‑proposal PhD candidate (all‑but‑dissertation) at Indiana University, specializing in Programming Languages. I also hold a BSc and MSc in Computer Science, with a specialization in Natural Language Processing and Machine Learning.</p>

    <p>A lot of hands‑on projects in the academic work all started with adding tail calls to a Racket‑to‑JavaScript compiler for my BSc thesis. For my master’s I developed a question‑answering system for high‑school students. My PhD work focuses on <em>optimizing VM run‑times for dynamic languages</em>. Specifically, I’m demonstrating that rapid prototyping of an efficient run‑time for a self‑hosting dynamically typed language (e.g. Racket) on a <em>meta‑tracing JIT compiler</em> is achievable.</p>

    <p>You can see the details for all of them down below.</p>
  </div>
  <hr>
</div>

