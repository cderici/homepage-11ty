<div class="w3-container w3-card caner-card w3-margin-bottom w3-animate-opacity w3-round-large">
  <div class="w3-right-align w3-text-grey">[click on a title to see details]</div>
  <h2 class="w3-text-grey w3-padding-16">
    <i class="fa fa-graduation-cap fa-fw w3-margin-right w3-xxlarge w3-text-deep-orange"></i>
    Education
  </h2>

  <!-- PhD Indiana -->
  <details class="w3-container w3-margin-bottom">
    <summary class="w3-padding-16 w3-left-align">
      <strong>PhD Computer Science – Indiana University, IN, USA</strong>
      <span class="w3-small w3-right"><i class="fa fa-calendar fa-fw w3-margin-right"></i>2015 – 2021</span>
    </summary>
    <div class="w3-container">
      <p>
        Specializing in Programming Languages (PL) under the supervision of <a href="http://homes.sice.indiana.edu/samth/" class="lnk">Sam Tobin‑Hochstadt</a>, minoring in Logic at the <a href="http://www.philosophy.indiana.edu/areas/ll.shtml" class="lnk">Department of Philosophy</a>.
      </p>
      <p>
        I work on fast run‑times of dynamically typed languages, particularly Racket. Initially, I investigated the effects of using the Racket byte‑code compiler as a front end for Pycket—studying optimizations like heavy inlining and lambda lifting and their effects on the Pycket run‑time.
      </p>
      <p>
        When Racket decided to become more portable and <a href="https://blog.racket-lang.org/2018/01/racket-on-chez-status.html" class="lnk">started adopting Chez Scheme as its run time</a>, I pivoted to help that effort. We had a rudimentary Racket implementation, <a href="https://github.com/pycket/pycket" class="lnk">Pycket</a>, a meta‑tracing JIT compiler automatically generated by the <a href="https://rpython.readthedocs.io/en/latest/" class="lnk">RPython framework</a>. It was designed to demonstrate that <a href="https://github.com/pycket/pycket/tree/master/papers" class="lnk">efficient sound gradual typing is possible</a>. I helped make Racket more portable and adopt Chez Scheme fully:contentReference[oaicite:0]{index=0}. Mimicking Racket’s self‑hosting on Racket‑on‑Chez, I turned Pycket into a full implementation of Racket with a meta‑tracing JIT as its run‑time:contentReference[oaicite:1]{index=1}.
      </p>
      <p>
        <a href="https://pypy.org/" class="lnk">PyPy</a> showed that fast prototyping of efficient run‑times for dynamic languages is possible through meta‑interpretation. My work takes this a step further to show that fast prototyping of efficient run‑times for <strong>self‑hosting</strong> dynamic languages is achievable:contentReference[oaicite:2]{index=2}.
      </p>
      <p>
        Currently <a href="https://github.com/pycket/pycket" class="lnk">Pycket</a> runs as fast as before on prior benchmarks, but self‑hosting introduces giant dispatch loops—similar to issues Mozilla encountered with <a href="https://blog.mozilla.org/nnethercote/category/tracemonkey/" class="lnk">TraceMonkey</a>. You often lose more when slow than you gain when fast. My work suggests workarounds and shows that an efficient run‑time with a meta‑tracing JIT is still possible for fast prototyping of self‑hosting dynamic languages:contentReference[oaicite:3]{index=3}.
      </p>
    </div>
  </details>

  <!-- PhD Bogazici -->
  <details class="w3-container w3-margin-bottom">
    <summary class="w3-padding-16 w3-left-align">
      <strong>PhD Computer Science – Boğaziçi University, Istanbul, TR</strong>
      <span class="w3-small w3-right"><i class="fa fa-calendar fa-fw w3-margin-right"></i>2014 – 2015</span>
    </summary>
    <div class="w3-container">
      <p>
        This program was a continuation of my MSc in natural language processing and machine learning:contentReference[oaicite:4]{index=4}. After another year of research on the system I built, I decided to pursue a PhD in programming languages instead.
      </p>
    </div>
  </details>

  <!-- MSc -->
  <details class="w3-container w3-margin-bottom">
    <summary class="w3-padding-16 w3-left-align">
      <strong>MSc Computer Engineering – Boğaziçi University, Istanbul, TR</strong>
      <span class="w3-small w3-right"><i class="fa fa-calendar fa-fw w3-margin-right"></i>2011 – 2014</span>
    </summary>
    <div class="w3-container">
      <p>
        I was part of the <a href="http://tabilab.cmpe.boun.edu.tr/" class="lnk">Text Analytics and Bio‑Informatics Lab</a>. I studied the <strong>theory of computation</strong> and <strong>automated theorem proving</strong>, then focused on <strong>machine learning</strong> and <strong>natural language processing</strong>:contentReference[oaicite:5]{index=5}. I worked on a closed‑domain question‑answering system for Turkish high‑school students (a government‑funded project).
      </p>
      <hr>
      <div class="w3-container">
        <div class="w3-quarter">Thesis title</div>
        <div class="w3-threequarter">Question Analysis and Information Retrieval for a Turkish Question Answering System: HazırCevap (<a href="/docs/msc-thesis.pdf" class="lnk"><strong>PDF</strong></a>)</div>
      </div>
      <hr>
      <div class="w3-container">
        <div class="w3-quarter">Supervisors</div>
        <div class="w3-threequarter">Tunga Güngör, Assoc. Arzucan Özgür, Günizi Kartal</div>
      </div>
      <hr>
      <div class="w3-container">
        <div class="w3-quarter">Abstract</div>
        <div class="w3-threequarter">
          This study describes and evaluates the techniques developed for the question analysis and information retrieval (IR) module of a closed‑domain Turkish factoid question‑answering system intended to support high‑school students. It proposes novel methods for two major problems—focus extraction and question classification—by integrating a rule‑based approach with an HMM‑based sequence classifier that leverages dependency relations among words. The IR module searches for relevant documents and passages using both Indri and Apache Lucene:contentReference[oaicite:6]{index=6}.
        </div>
      </div>
    </div>
  </details>

  <!-- BSc -->
  <details class="w3-container w3-margin-bottom">
    <summary class="w3-padding-16 w3-left-align">
      <strong>BSc Computer Science – Istanbul Bilgi University, Istanbul, TR</strong>
      <span class="w3-small w3-right"><i class="fa fa-calendar fa-fw w3-margin-right"></i>2005 – 2010</span>
    </summary>
    <div class="w3-container">
      <p>
        I gained both theoretical and practical experience. I programmed in imperative, functional and logic languages, focusing on the <strong>theory of computation</strong> and <strong>programming languages</strong> design and implementation:contentReference[oaicite:7]{index=7}.
      </p>
      <hr>
      <div class="w3-container">
        <div class="w3-quarter">Thesis title</div>
        <div class="w3-threequarter">
          Proper Tail Calls From First‑Class Continuations in JavaScript (
          <a href="https://cderici.github.io/docs/bsc-thesis/caner_thesis.pdf" class="lnk"><strong>PDF</strong></a> |
          <a href="https://cderici.github.io/docs/bsc-thesis/thesis.tar.gz" class="lnk"><strong>tex</strong></a>)
        </div>
      </div>
      <hr>
      <div class="w3-container">
        <div class="w3-quarter">Supervisors</div>
        <div class="w3-threequarter">Chris Stephenson, Shriram Krishnamurthi, Alpaslan Parlakçı, Matthew Edwards</div>
      </div>
      <hr>
      <div class="w3-container">
        <div class="w3-quarter">Abstract</div>
        <div class="w3-threequarter">
          This thesis demonstrates that proper tail‑call behaviour in JavaScript is possible without modifying the interpreter. It is based on the paper “Continuations from Generalized Stack Inspection” (Pettyjohn et al.), which presents a program transformation for obtaining first‑class continuations from exception‑handling mechanisms. My work extends their technique to achieve tail‑call optimized computation without touching the interpreter.
        </div>
      </div>
    </div>
  </details>
  <hr>
</div>

